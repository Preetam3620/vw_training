https://howtodoinjava.com/spring-core/spring-bean-life-cycle/
The life cycle of a Spring bean is easy to understand. 
When a bean is instantiated, it may be required to perform some initialization to get it into a usable state. 
Similarly, when the bean is no longer required and is removed from the container, some cleanup may be required.

Though, there are lists of the activities that take place behind the scene between the time of bean Instantiation 
and its destruction, this chapter will discuss only two important bean life cycle callback methods, 
which are required at the time of bean initialization and its destruction.

To define setup and teardown for a bean, we simply declare the <bean> with initmethod and/or destroy-method parameters. 
The init-method attribute specifies a method that is to be called on the bean immediately upon instantiation. 
Similarly, destroymethod specifies a method that is called just before a bean is removed from the container.

Initialization callbacks
The org.springframework.beans.factory.InitializingBean interface specifies a single method −

void afterPropertiesSet() throws Exception;
Thus, you can simply implement the above interface and initialization work can be done inside 
afterPropertiesSet() method as follows −

public class ExampleBean implements InitializingBean {
   public void afterPropertiesSet() {
      // do some initialization work
   }
}
In the case of XML-based configuration metadata, you can use the init-method attribute to specify the name of 
the method that has a void no-argument signature. For example −

<bean id = "exampleBean" class = "examples.ExampleBean" init-method = "init"/>
Following is the class definition −

public class ExampleBean {
   public void init() {
      // do some initialization work
   }
}
Destruction callbacks
The org.springframework.beans.factory.DisposableBean interface specifies a single method −

void destroy() throws Exception;
Thus, you can simply implement the above interface and finalization work can be done inside destroy() method as follows −

public class ExampleBean implements DisposableBean {
   public void destroy() {
      // do some destruction work
   }
}
In the case of XML-based configuration metadata, you can use the destroy-method attribute to specify the 
name of the method that has a void no-argument signature. For example −

<bean id = "exampleBean" class = "examples.ExampleBean" destroy-method = "destroy"/>
Following is the class definition −

public class ExampleBean {
   public void destroy() {
      // do some destruction work
   }
}
If you are using Spring's IoC container in a non-web application environment; 
for example, in a rich client desktop environment, you register a shutdown hook with the JVM. 
Doing so ensures a graceful shutdown and calls the relevant destroy methods on your singleton beans 
so that all resources are released.

It is recommended that you do not use the InitializingBean or DisposableBean callbacks, 
because XML configuration gives much flexibility in terms of naming your method.